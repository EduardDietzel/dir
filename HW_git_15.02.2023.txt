Описание занятия: 
1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?
- git restore <file>


2.Как вернуть файл из индекса в рабочий каталог?
- git reset HEAD <file>


3.Как отменить ошибочный commit ?
- git commit --amend


4.Как создать новую ветку и переключится в нее?
- git branch <branch_name>
- git checkout <branch_name>


5.В чем отличение между fast-forward merge  and non fast-forfard merge?
- Флаг --no-ff отменяет механизм fast-forward, который стоит в git по умолчанию. Если его не отменить, git не будет создавать новый коммит, в котором объединятся две ветки, а просто сделает дополнительную ветку веткой main.


6.Когда может возникнуть конфликт слияния веток, как  его разрешить?
- Иногда Git не понимает, как именно нужно объединить ветки и выводит сообщение о конфликте. В таких ситуациях, мы должны показать ему это. Для этого переходим в редактор, удаляем лишние символы и приводим код к тому виду, который нам нужен.  Сохраняем файл в редакторе, проверяем git status — увидим сообщение о конфликте. Чтобы показать Git, что мы разрешили конфликт, просто закоммитим изменения: 
git commit -a -m «Add <branch_name> in main».
Проверим историю: git log. Если видим сообщение о коммите, в котором сливаются две ветки, значит, все получилось.

7.Можно ли удалить ветку? Как? 
- Если мы понимаем, что ветка больше не нужна, можно ее удалить.  При этом удаляемая ветка не должна быть той веткой, в которой мы находимся. Удалим ветку <branch_name>: 
git branch -d <branch_name>


В ответах на вопросы 1-4, 7 необходимо указать конкретные команда git. 
На 5 и 6 вопросы дать объяснение своими словами.